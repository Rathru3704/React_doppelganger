{"version":3,"sources":["serviceWorker.js","components/SearchBox.js","components/ErrorBoundary.js","components/Card.js","components/CardList.js","containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","SearchBox","searchChange","className","type","onChange","placeholder","ErrorBoundary","state","hasError","error","info","this","setState","props","children","Component","Card","id","name","email","phone","address","alt","src","style","width","CardList","doppelgangers","map","doppelganger","i","key","city","App","onSearchChange","event","searchfield","target","value","fetch","then","response","json","users","filterDoppels","filter","doppel","toLowerCase","includes","length","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"+PAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,uCCRSC,G,MARG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAChB,OACI,6BACI,2BAAOC,UAAU,8DAA8DC,KAAK,SAASC,SAAUH,EAAcI,YAAY,2BCiB9HC,E,YAnBX,aAAe,IAAD,8BACV,+CACKC,MAAQ,CACTC,UAAU,GAHJ,E,+EAOIC,EAAOC,GACrBC,KAAKC,SAAS,CAACJ,UAAU,M,+BAIzB,OAAGG,KAAKJ,MAAMC,SACH,oDAEJG,KAAKE,MAAMC,a,GAhBEC,aCyBbC,G,MAvBF,SAAC,GAAuC,IAAtCC,EAAqC,EAArCA,GAAIC,EAAiC,EAAjCA,KAAMC,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,MAAOC,EAAa,EAAbA,QAOnC,OACI,yBAAKnB,UAAU,8DAGX,yBAAKA,UAAU,SAASoB,IAAI,eAAeC,IAAG,kDAA6CN,EAA7C,QAAuDO,MAAO,CAACC,MAAO,OACpH,wBAAIvB,UAAU,OAAOgB,GACrB,yBAAKhB,UAAU,MACX,2BAAG,4BAAI,2CAA4B,6BAAUiB,GAC7C,2BAAG,4BAAI,2CAA4B,6BAAUC,GAC7C,2BAAG,4BAAI,6CAA8B,6BAAUC,IAEnD,uBAAGnB,UAAU,SAAb,SCgBGwB,EA7BE,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cACf,OACI,yBAAKzB,UAAU,OAETyB,EAAcC,KAAI,SAACC,EAAcC,GAC/B,OACI,kBAAC,EAAD,CAAMC,IAAKJ,EAAcG,GAAGb,GAAIA,GAAIU,EAAcG,GAAGb,GAAIC,KAAMS,EAAcG,GAAGZ,KAAMC,MAAOQ,EAAcG,GAAGX,MAAOC,MAAOO,EAAcG,GAAGV,MAAOC,QAASM,EAAcG,GAAGT,QAAQW,YC0C3LC,E,YA3Cb,aAAc,IAAD,8BACX,+CAaFC,eAAiB,SAACC,GAChB,EAAKvB,SAAS,CAACwB,YAAaD,EAAME,OAAOC,SAbzC,EAAK/B,MAAQ,CACXoB,cAAe,GACfS,YAAa,IAJJ,E,iFAQO,IAAD,OACjBG,MAAM,8CACHC,MAAK,SAAAC,GAAc,OAAOA,EAASC,UACnCF,MAAK,SAAAG,GAAW,EAAK/B,SAAS,CAACe,cAAegB,S,+BAO1C,IAAD,OACAC,EAAgBjC,KAAKJ,MAAMoB,cAAckB,QAAO,SAAAC,GACpD,OAAOA,EAAO5B,KAAK6B,cAAcC,SAAS,EAAKzC,MAAM6B,YAAYW,kBAGnE,OAAuC,IAApCpC,KAAKJ,MAAMoB,cAAcsB,OACnB,wBAAI/C,UAAU,MAAd,cAIL,yBAAKA,UAAU,MACb,wBAAIA,UAAU,cAAd,oBACA,wBAAIA,UAAU,OAAd,oBACA,kBAAC,EAAD,CAAWD,aAAcU,KAAKuB,iBAC9B,kBAAC,EAAD,KAEI,kBAAC,EAAD,CAAUP,cAAeiB,U,GAnCrB7B,a,MCNlBmC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SN4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhB,MAAK,SAAAiB,GACJA,EAAaC,gBAEdC,OAAM,SAAAlD,GACLmD,QAAQnD,MAAMA,EAAMoD,c","file":"static/js/main.d71929a9.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n    return(\r\n        <div>\r\n            <input className='dib br3 bn pt2 ph4-ns pb3 mb3 orange bg-near-black shadow-4' type='search' onChange={searchChange} placeholder='search doppelganger'/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundary extends Component {  // Error Boundary is the new feature for React 16 or higher version\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info) {  // This lifecycle is invoked after an error has been thrown by a descendant component. It receives two parameters: error and info\r\n        this.setState({hasError: true})\r\n    }\r\n\r\n    render() {\r\n        if(this.state.hasError){\r\n            return <h1>An Error Occurred!!!</h1>\r\n        }\r\n        return this.props.children\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import React from 'react';\r\nimport './Card.css';\r\n\r\n// Dumb(Presentational) Component\r\nconst Card = ({id, name, email, phone, address}) => {\r\n    /* \r\n    const Card = (props) => {\r\n        const {id, name, email, phone, address} = props;\r\n    };\r\n    */\r\n\r\n    return(\r\n        <div className='dib br3 bw2 pt4 ph4 ma2 orange bg-near-black shadow-4 grow'>\r\n        {/* dib = display:inline-block; br3 = border-radius:.5rem; bw2 = border-width:.25rem;\r\n            pa3 = padding:var(--spacing-medium); ma2 = margin:var(--spacing-small); shadow-5 = box-shadow:4px 4px 8px 0px rgba( 0, 0, 0, 0.2 ) */}\r\n            <img className='br-100' alt='doppelganger' src={`https://randomuser.me/api/portraits/men/${id}.jpg`} style={{width: 250}}></img>\r\n            <h3 className='mv4'>{name}</h3>\r\n            <div className='tl'>\r\n                <p><em><strong>Email:</strong></em><br></br>{email}</p>\r\n                <p><em><strong>Phone:</strong></em><br></br>{phone}</p>\r\n                <p><em><strong>Address:</strong></em><br></br>{address}</p>\r\n            </div>\r\n            <p className='tr f3'>//</p>            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\n/*\r\nDumb(Presentational) Component:\r\n    present something to the DOM\r\n    often a function with a render() method\r\n*/\r\n\r\nconst CardList = ({doppelgangers}) => {\r\n    return(\r\n        <div className='mh5'>\r\n            {\r\n              doppelgangers.map((doppelganger, i) => {\r\n                return(\r\n                    <Card key={doppelgangers[i].id} id={doppelgangers[i].id} name={doppelgangers[i].name} email={doppelgangers[i].email} phone={doppelgangers[i].phone} address={doppelgangers[i].address.city} />\r\n                    // When do a loop you need a key prop to remember every element\r\n                    // Keys help React identify which items have changed, are added, or are removed. \r\n                    // Keys should be given to the elements inside the array to give the elements a stable identity\r\n                    // https://reactjs.org/docs/lists-and-keys.html#keys\r\n                );\r\n              })\r\n            }\r\n        </div>\r\n    );\r\n}\r\n// old version is like this below:\r\n/*\r\nimport React, {Component} from 'react';\r\nclass CardList extends React.Component{\r\n  render(){\r\n    return(\r\n      ...\r\n    )\r\n  }\r\n}\r\n*/\r\n\r\nexport default CardList;","import React, { Component } from 'react';  // thus can understand JSX\r\nimport './App.css';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\nimport CardList from '../components/CardList'; \r\n\r\n/*\r\nSmart(Container) Component:\r\n  *keep track of state\r\n\t*pass data down to the dumb components as props\r\n  *class-based\r\n*/\r\nclass App extends Component{ // Create a class named \"App\" which will inherit the methods from the \"Component\" class, by using the extends keyword.\r\n  constructor(){\r\n    super(); // By calling the super() method in the constructor method, we call the parent's constructor method and gets access to the parent's properties and methods:\r\n    this.state = {\r\n      doppelgangers: [],\r\n      searchfield: ''\r\n    }\r\n  }\r\n\r\n  componentDidMount(){  // you don't have to use arrow function; it is invoked immediately after a component is mounted (inserted into the tree).\r\n    fetch('https://jsonplaceholder.typicode.com/users')  // a global method that provides an easy, logical way to fetch resources asynchronously across the network; differs from jQuery.ajax()\r\n      .then(response => { return response.json(); })\r\n      .then(users => { this.setState({doppelgangers: users}) })\r\n  }\r\n\r\n  onSearchChange = (event) => {  // must use arrow function cause it is not a build-in function\r\n    this.setState({searchfield: event.target.value});\r\n  }\r\n\r\n  render(){\r\n    const filterDoppels = this.state.doppelgangers.filter(doppel => {\r\n      return doppel.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n    })\r\n\r\n    if(this.state.doppelgangers.length === 0){\r\n      return <h1 className='tc'>loading...</h1>\r\n    }\r\n    else{\r\n      return(\r\n        <div className='tc'>\r\n          <h1 className='mt5 mb1 f1'>- DOPPELGANGER -</h1>\r\n          <h2 className='mb4'>A User Generator</h2>\r\n          <SearchBox searchChange={this.onSearchChange}/>\r\n          <ErrorBoundary>\r\n            {/* <Scroll> */}\r\n              <CardList doppelgangers={filterDoppels} />\r\n            {/* </Scroll> */}\r\n          </ErrorBoundary>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom'; // for DOM web site\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from './containers/App'; // Convention dictates that Component start with a capital\r\nimport 'tachyons';\r\n\r\nReactDOM.render(<App /> ,document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}